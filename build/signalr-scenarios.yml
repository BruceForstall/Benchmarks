# SignalR scenarios

parameters:
- name: server
  type: string
  default: ''
- name: client
  type: string
  default: ''
- name: warmup
  type: number
  default: 0
- name: duration
  type: number
  default: 15

# Scenarios
- name: scenarios 
  type: object
  default: 

  # SignalR
  - displayName: SignalRBroadcast WebSockets Json
    arguments: --scenario SignalRBroadcast --load.variable.transport WebSockets --load.variable.protocol json $(signalRJobs)
  - displayName: SignalRBroadcast WebSockets MessagePack
    arguments: --scenario SignalRBroadcast --load.variable.transport WebSockets --load.variable.protocol messagepack $(signalRJobs)
  - displayName: SignalRBroadcast ServerSentEvents Json
    arguments: --scenario SignalRBroadcast --load.variable.transport ServerSentEvents --load.variable.protocol json $(signalRJobs)
  - displayName: SignalRBroadcast LongPolling Json
    arguments: --scenario SignalRBroadcast --load.variable.transport LongPolling --load.variable.protocol json $(signalRJobs)
  - displayName: SignalRBroadcast LongPolling MessagePack
    arguments: --scenario SignalRBroadcast --load.variable.transport LongPolling --load.variable.protocol messagepack $(signalRJobs)
  - displayName: SignalREcho WebSockets Json
    arguments: --scenario SignalREcho --load.variable.transport WebSockets --load.variable.protocol json $(signalRJobs)
  - displayName: SignalREcho WebSockets MessagePack
    arguments: --scenario SignalREcho --load.variable.transport WebSockets --load.variable.protocol messagepack $(signalRJobs)
  - displayName: SignalREcho ServerSentEvents Json
    arguments: --scenario SignalREcho --load.variable.transport ServerSentEvents --load.variable.protocol json $(signalRJobs)
  - displayName: SignalREcho LongPolling Json
    arguments: --scenario SignalREcho --load.variable.transport LongPolling --load.variable.protocol json $(signalRJobs)
  - displayName: SignalREcho LongPolling MessagePack
    arguments: --scenario SignalREcho --load.variable.transport LongPolling --load.variable.protocol messagepack $(signalRJobs)
  - displayName: SignalREchoAll WebSockets Json
    arguments: --scenario SignalREchoAll --load.variable.transport WebSockets --load.variable.protocol json $(signalRJobs)
  - displayName: SignalREchoAll WebSockets MessagePack
    arguments: --scenario SignalREchoAll --load.variable.transport WebSockets --load.variable.protocol messagepack $(signalRJobs)
  - displayName: SignalREchoAll ServerSentEvents Json
    arguments: --scenario SignalREchoAll --load.variable.transport ServerSentEvents --load.variable.protocol json $(signalRJobs)
  - displayName: SignalREchoAll LongPolling Json
    arguments: --scenario SignalREchoAll --load.variable.transport LongPolling --load.variable.protocol json $(signalRJobs)
  - displayName: SignalREchoAll LongPolling MessagePack
    arguments: --scenario SignalREchoAll --load.variable.transport LongPolling --load.variable.protocol messagepack $(signalRJobs)

variables:
  session: "$[format('{0:yyyyMMddHHmm}', pipeline.startTime)]"
  defaultArgs: --application.endpoints $(server) --load.endpoints $(client) --session $(session) --variable serverUri=http://10.0.0.102
  sqlArgs: --table SignalR #--sql SQL_CONNECTION_STRING

  signalRJobs: --config https://raw.githubusercontent.com/aspnet/Benchmarks/master/src/BenchmarksDriver2/benchmarks.signalr.yml

# Agent-less jobs need this pool
pool: server

jobs:
- job: Trend
  steps:
  - ${{ each s in parameters.scenarios }}:
    - task: PublishToAzureServiceBus@1
      condition: always()
      displayName: ${{ s.displayName }}
      inputs:
        azureSubscription: ASP.NET Benchmarks Queue
        waitForCompletion: true
        messageBody: |
          {
            "name": "benchmarksdriver2",
            "args": [ "$(defaultArgs) $(sqlArgs) ${{ s.arguments }}" ]
          }
