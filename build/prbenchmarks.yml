trigger: none

variables:
  - group: 'ASP.NET Benchmarks'

schedules:
- cron: "0 * * * *"
  displayName: "On :00"
  branches:
    include:
    - main
  always: "true" # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.
# - cron: "15 * * * *"
#   displayName: "On :15"
#   branches:
#     include:
#     - main
#   always: "true"
- cron: "30 * * * *"
  displayName: "On :30"
  branches:
    include:
    - main
  always: "true"
# - cron: "45 * * * *"
#   displayName: "On :45"
#   branches:
#     include:
#     - main
#   always: "true"

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: ASP.NET-Performance-Controller-new
      image: MMSWindows2022-Secure
      os: windows

    # opting-out of SBOM generation as we don't produce artifacts
    sdl:
      sbom:
        enabled: false

    stages:
    - stage: Stage
      jobs:
      - job: BenchmarkWindows
        displayName: Benchmarks Windows Image
        pool:
          name: ASP.NET-Performance-Controller-new
          image: MMSWindows2022-Secure
          os: windows
        timeoutInMinutes: 120
        steps:
        - powershell: |
              git clone https://github.com/dotnet/crank -b main
              cd .\crank\src\Microsoft.Crank.PullRequestBot
              git pull
              git rev-parse HEAD
              dotnet build -c release --framework net8.0

              $buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" 

              dotnet run --no-build --framework net8.0 -c release `
                  --repository https://github.com/dotnet/aspnetcore `
                  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/prbenchmarks.aspnetcore.config.yml `
                  --app-id $(github.appid) `
                  --install-id $(github.installid) `
                  --app-key "env:APP_KEY" `
                  --publish-results true `
                  --external-log-uri $buildUrl

              dotnet run --no-build --framework net8.0 -c release `
                  --repository https://github.com/dotnet/efcore `
                  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/prbenchmarks.efcore.config.yml `
                  --app-id $(github.appid) `
                  --install-id $(github.installid) `
                  --app-key "env:APP_KEY" `
                  --publish-results true `
                  --external-log-uri $buildUrl

              dotnet run --no-build --framework net8.0 -c release `
                  --repository https://github.com/dotnet/runtime `
                  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/prbenchmarks.runtime.windows_x64.config.yml `
                  --app-id $(github.appid) `
                  --install-id $(github.installid) `
                  --app-key "env:APP_KEY" `
                  --publish-results true `
                  --external-log-uri $buildUrl

              dotnet run --no-build --framework net8.0 -c release `
                  --repository https://github.com/dotnet/runtime `
                  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/prbenchmarks.runtime.windows_arm64.config.yml `
                  --app-id $(github.appid) `
                  --install-id $(github.installid) `
                  --app-key "env:APP_KEY" `
                  --publish-results true `
                  --external-log-uri $buildUrl

          env:
              AZURE_RELAY: $(relay.connectionstring)
              APP_KEY: $(github.privatekey)

      - job: BenchmarkLinux
        displayName: Benchmarks Linux Image
        pool:
          name: ASP.NET-Performance-Controller-new
          image: MMSUbuntu22.04-Secure
          os: linux
          timeoutInMinutes: 120
        steps:
        - powershell: |
              git clone https://github.com/dotnet/crank -b main
              cd ./crank/src/Microsoft.Crank.PullRequestBot
              git rev-parse HEAD
              dotnet build -c release --framework net8.0

              $buildUrl="$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" 

              dotnet run --no-build --framework net8.0 -c release `
                  --repository https://github.com/dotnet/runtime `
                  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/prbenchmarks.runtime.linux_x64.config.yml `
                  --app-id $(github.appid) `
                  --install-id $(github.installid) `
                  --app-key "env:APP_KEY" `
                  --publish-results true `
                  --external-log-uri $buildUrl

              dotnet run --no-build --framework net8.0 -c release `
                  --repository https://github.com/dotnet/runtime `
                  --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/build/prbenchmarks.runtime.linux_arm64.config.yml `
                  --app-id $(github.appid) `
                  --install-id $(github.installid) `
                  --app-key "env:APP_KEY" `
                  --publish-results true `
                  --external-log-uri $buildUrl

          env:
              AZURE_RELAY: $(relay.connectionstring)
              APP_KEY: $(github.privatekey)
